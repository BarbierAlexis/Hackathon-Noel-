{"remainingRequest":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/src/components/Form.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/src/components/Form.vue","mtime":1576845310918},{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/barbier/Projets/Hackathon Noel/Hackathon-Noel-/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaHIgewogIGJhY2tncm91bmQtY29sb3I6ICNmZmMyMDE7Cn0KLmNvbnRhaW5lciB7CiAgbWFyZ2luLXRvcDogNTBweDsKfQouZm9ybS1ncm91cCB7CiAgd2lkdGg6IDUwJTsKfQo="},{"version":3,"sources":["Form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Form.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <hr>\n    <p></p>\n    <b-button variant=\"primary\" @click=\"Meteo\" >Temperature</b-button>\n    <center><b-form-group class=\"input\" id=\"input-group-2\" label=\"Description:\" label-for=\"input-2\" max-length=\"200\">\n      <b-form-input\n        id=\"input-2\"\n        v-model=\"form.description\"\n        required\n        placeholder=\"Description\"\n      ></b-form-input>\n    </b-form-group></center>\n    <center><b-form-group class=\"input\" id=\"input-group-3\" label=\"Déchets:\" label-for=\"input-3\" width=50%>\n      <b-form-select\n        id=\"input-3\"\n        v-model=\"form.dechet\"\n        :options=\"dechets\"\n        required\n      ></b-form-select>\n    </b-form-group></center>\n    <b-button type=\"submit\" variant=\"primary\" @click=\"Geo\" >Envoyer</b-button>\n    <Camera v-on:takePicture=\"this.takePicture\" />\n    <Gallery />\n    <hr>\n  </div>\n</template>\n<script>\n\n  import Camera from './Camera'\n  import Gallery from './Gallery'\n\n  export default {\n    components: {\n    Camera,\n    Gallery\n    },\n    // mounted() {\n    //   console.log('Component Mounted')\n    // }\n\n    data() {\n      return {\n        form: {\n          image: null,\n          description: '',\n          dechet: null,\n          checked: [],\n          latitude: null,\n          longitude: null\n        },\n        dechets: [{ text: 'Selectionner', value: null }, 'Encombrants', 'Déjections animales', 'Autres'],\n        show: true\n      }\n    },\n\n    methods: {\n\n      Meteo:function (){\n      axios('http://localhost:8090/weather')\n      .then((response) => {\n        console.log(response.data.observations.location[0].observation[0.temperature)\n      })\n    },\n    \n      Geo: function (){\n    navigator.geolocation.getCurrentPosition((success, error, options) =>{\n      return (this.form.latitude = success.coords.latitude,\n      this.form.longitude = success.coords.longitude)\n    })\n    },\n    Return: function (){\n      return (this.form.latitude = null,\n      this.form.longitude = null)\n    },\n\n      takePicture () {\n        let ratio = (window.innerHeight > window.innerWidth) ? 16 / 9 : 9 /16;\n        const picture = document.querySelector(\"canvas\");\n        const ctx = picture.getContext(\"2d\");\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = \"high\";\n        ctx.drawImage(document.querySelector(\"video\"),0,0, picture.width, picture.height)\n        this.form.image = picture\n        console.log(this.form.image)\n      },\n\n      onSubmit(evt) {\n        evt.preventDefault();\n        alert(JSON.stringify(this.form));\n        axios.post('http://localhost:8000/tweet/', {\n          description: this.form.description,\n          dechet: this.form.dechet\n        }).then((response) => {\n          console.log(response);\n        }).catch(err => {\n          console.error(err);\n        })\n      console.log(this.form.description)\n    },\n      onReset(evt) {\n        evt.preventDefault()\n        // Reset our form values\n        this.form.description = ''\n        this.form.dechet = null\n\n        // Trick to reset/clear native browser form validation state\n        this.show = false\n        this.$nextTick(() => {\n          this.show = true\n        })\n      }\n    }\n  }  \n</script>\n\n<style>\nhr {\n  background-color: #ffc201;\n}\n.container {\n  margin-top: 50px;\n}\n.form-group {\n  width: 50%;\n}\n</style>"]}]}